name: CI/CD Pipeline for ECR and EC2

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    name: Build, Push to ECR, Deploy on EC2
    runs-on: self-hosted

    env:
      ECR_REGISTRY: 418272768555.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: modie/modie-be
      COMMIT_HASH: "${{ github.sha }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set short COMMIT_HASH
        run: echo "COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_USER_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build, tag, and push image to Amazon ECR
        run: |
          set -e  # 오류 발생 시 즉시 종료
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_HASH \
                          -t $ECR_REGISTRY/$ECR_REPOSITORY:dev .

          echo "Pushing Docker image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_HASH &
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:dev &
          wait  # 모든 Push 완료될 때까지 대기

          echo "✅ Image pushed successfully!"


      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          script: |
            set -e  # 🚀 오류 발생 시 즉시 종료
            COMMIT_HASH=$(aws ecr describe-images --repository-name modie/modie-be \
                  --region ap-northeast-2 --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
            echo "🚀 사용할 Docker 태그: $COMMIT_HASH"

            # 로그 디렉토리 생성 및 권한 설정
            sudo mkdir -p /var/log/modie/dev
            sudo chown $(id -u):$(id -g) /var/log/modie/dev
            sudo chmod 755 /var/log/modie/dev

            # aws 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 418272768555.dkr.ecr.ap-northeast-2.amazonaws.com/modie/modie-be

            # Pull 최신 이미지
            docker pull 418272768555.dkr.ecr.ap-northeast-2.amazonaws.com/modie/modie-be:$COMMIT_HASH

            # Nginx 설정 파일 경로
            NGINX_CONFIG=/etc/nginx/sites-enabled/default

            # 기존 컨테이너 확인 및 포트 설정
            PORT=8080
            OTHER_PORT=8081
            if docker ps | grep -q "0.0.0.0:8081"; then
              PORT=8080
              OTHER_PORT=8081
              BG_MODE=blue
            else
              PORT=8081
              OTHER_PORT=8080
              BG_MODE=green
            fi

            docker run -d -p $PORT:8080 --name modie-be-$PORT \
              -e RDS_ENDPOINT=${{ secrets.DB_HOST }} \
              -e RDS_PORT=${{ secrets.DB_PORT }} \
              -e DB_USERNAME=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e KAKAO_REST_API_KEY=${{ secrets.KAKAO_REST_API_KEY }} \
              -e KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }} \
              -e DATABASE_NAME=modie \
              -e FCM_PROJECT_ID=${{ secrets.FCM_PROJECT_ID }} \
              -e FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} \
              -e FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }} \
              -e FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }} \
              -e FIREBASE_PRIVATE_KEY=${{ secrets.FIREBASE_PRIVATE_KEY }} \
              -e FIREBASE_CLIENT_X509_CERT_URL=${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }} \
              -e HASH_KEY=${{ secrets.HASH_KEY }} \
              -e SPRING_PROFILES_ACTIVE=dev \
              -v /var/log/modie/dev:/var/log/modie/dev \
              --restart always \
              418272768555.dkr.ecr.ap-northeast-2.amazonaws.com/modie/modie-be:$COMMIT_HASH || {
                echo "❌ Docker 컨테이너 실행 실패!"
                exit 1
              }

            echo "⌛ 신규 컨테이너 /health 체크 중..."
              for i in {1..20}; do
                sleep 3
                if [ "$(curl -s -o /dev/null -w '%{http_code}' http://localhost:$PORT/health)" = "200" ]; then
                  echo "✅ 신규 컨테이너가 정상적으로 기동되었습니다!"
                  break
                fi

                if [ "$i" -eq 20 ]; then
                  echo "❌ /health 체크 실패! 롤백 수행"
                  docker stop modie-be-$PORT
                  docker rm modie-be-$PORT
                  exit 1
                fi
            done

            sudo sed -i "s|set \$active_backend backend-.*;|set \$active_backend backend-$BG_MODE;|g" $NGINX_CONFIG

            # 🔥 Nginx 설정 테스트 후 적용 (실패 시 롤백)
            if sudo nginx -t; then
              sudo systemctl reload nginx
              echo "✅ Nginx 설정이 성공적으로 적용되었습니다!"
            else
              echo "❌ Nginx 설정 오류 발생! 롤백 수행"
              docker stop modie-be-$PORT
              docker rm modie-be-$PORT
              exit 1
            fi

            # 이전 컨테이너 종료 및 삭제
            docker stop modie-be-$OTHER_PORT || true
            docker rm modie-be-$OTHER_PORT || true

            echo "🚀 배포 완료!"
